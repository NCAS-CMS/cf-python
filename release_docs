#!/bin/bash

set -x

if [[ ! $1 ]] ; then 
  echo "No version \$1 (e.g. 3.3.0)"
  exit 1
fi

version=$1

if [[ $2 = "latest" ]] ; then 
  dir=$PWD/docs
elif [[ $2 = "archive" ]] ; then
  dir=$PWD/docs/$version
elif [[ $2 = "dev" ]] ; then
  # For testing: creates separate dir and does not (git) commit. DOES
  # NOT deletes an existing .doctrees subdirectory, meaning that
  # untouched source files (.py or .rst) might not get rebuilt, even
  # if conf.py or other styling files have been modified.
  dir=$PWD/docs/dev
elif [[ $2 = "dev-clean" ]] ; then
  # For testing: creates separate dir and does not (git) commit and
  # also deletes an existing .doctrees subdirectory
  dir=$PWD/docs/dev
else
  set +x
  echo "\$2 must be one of 'latest', 'archive', 'dev' or 'dev-clean'"
  exit 2
fi

export PYTHONPATH=$PWD:$PYTHONPATH

# Make zip of example files
cd docs/source/sample_files
zip cf_tutorial_files.zip *.nc *.pp
cd -

# Regerenate tutorial.py field_analysis.py
if [[ $2 = "latest" ]] || [[ $2 = "archive" ]] ; then
  ./test_tutorial_code
  rc=$?
  if [[ $rc != 0 ]]; then
    echo "test_tutorial_code failed."
    # exit $rc
  fi
fi

# --------------------------------------------------------------------
# Make the latest docs    
# --------------------------------------------------------------------
cd docs
if [[ $2 = "latest" ]] || [[ $2 = "archive" ]] || [[ $2 = "dev-clean" ]] ; then
  rm -fr $dir/.doctrees
fi
mkdir -p $dir/_downloads

make html $dir

cp -pv source/sample_files/cf_tutorial_files.zip source/tutorial.py source/field_analysis.py $dir/_downloads

for download_file in cf_tutorial_files.zip tutorial.py field_analysis.py
do
  # Remove the hash string component added by GitHub to the link
  # where the resources are hosted (GH changes it to something like
  # '_downloads/4cd32e1c6bdf28fb61e15ffab2a8d84e/download_file')
  sed -i "s/\(href=._downloads\).*\($download_file\)/\1\/\2/" \
    $dir/tutorial.html \
    $dir/analysis.html
    # all pages referencing these resources must be added to this list
done

# Copy over our custom stylesheet. It is referenced in the HTML docs
# files but Sphinx with alabaster theme doesn't seem to (?) provide a
# means to transfer it to the created _static dir via the build itself
# *when* the output dir is the top-level one (hence copy works for
# 'dev' & 'archive' builds to sub-dirs).  Seemingly relates to the
# build warning:
#   WARNING: html_static_path entry '_static' is placed inside outdir
if [[ $2 = "latest" ]] ; then
  cp source/_static/customise-alabaster.css _static/customise-alabaster.css
fi

# Copy the templates to the target directory
if [[ $2 != "latest" ]] ; then
  rm -fr $dir/_templates
  cp -pr _templates $dir
fi

# --------------------------------------------------------------------
# Add and commit the latest or archive
# --------------------------------------------------------------------
if [[ $2 = "latest" ]] || [[ $2 = "archive" ]] ; then
  cd $dir
  git add \
          *.html \
          */*.html \
          *.inv \
          *.js \
          _static \
          _templates \
          _downloads/cf_tutorial_files.zip \
          _downloads/tutorial.py \
          _downloads/field_analysis.py \
          _images/*.png \
          _images/*.svg

  git commit -a -m "v$version $2 documentation"
fi

set +x

echo PYTHONATH=$PYTHONPATH

