# A GitHub Action to run the cf-python test suite upon push or PR to master.
name: Run test suite

# Triggers the workflow on push or PR events for the master branch (only)
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Note a workflow can have 1+ jobs that can run sequentially or in parallel.
jobs:
  # TODO: setup parallel runs (-job-2 etc.) of sub-tests for speed-up
  test-suite-job-0:
    # The type of runner that the job will run on (this value is standard)
    # TODO: also run with older Linux 'ubuntu-16.04', and Mac, 'macos-latest'.
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # TODO: extend to 3.5, 3.6, 3.8 once have got this Action working
        python-version: [3.7]

    # A sequence of tasks that will be executed as part of this job:
    steps:
    # Checks out the repository under $GITHUB_WORKSPACE so job can access it
    - name: Checkout
      uses: actions/checkout@v2

    # Provide a notification message
    - name: Notify about setup
      run: echo Now setting up the environment for the cf-python test suite...

    # Prepare to run the test-suite on different versions of Python 3:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    # NOTE: for installing dependencies, it may be easier to get an Action to
    # get conda, & install the dependencies, esp. UDUNITS, from there. See
    # e.g. https://github.com/goanpeca/setup-miniconda pre-existing Action.
    #
    # Setup conda
    - name: Setup a conda environment for installing dependencies painlessly.
    - uses: actions/checkout@v2
    - uses: goanpeca/setup-miniconda@enh/channels
      with:
        miniconda-version: 'latest'
        activate-environment: cf-py3-all-deps
        python-version: ${{ matrix.python-version }}
        channels: ncas, conda-forge
    - shell: bash -l {0}
      run: |
        conda info
        conda list

    # Install prerequisite to cf-python C dependency (the Expat library)
    # name: Download and install Expat prereq to C-based dependency UDUNITS
    # wget --no-check-certificate --content-disposition https://github.com/libexpat/libexpat/releases/download/R_2_2_9/expat-2.2.9.tar.gz
    # tar xvzf expat-2.2.9.tar.gz
    # cd expat-2.2.9
    # ./configure
    # make
    # make install

    # Install one C-based cf-python dependency pre-testing
    # - name: Download and install C-based dependency (UDUNITS)
    #  # Steps following (roughly) the 'Autoconf-based Installation' install
    #  # instructions in the official docs (see:
    #  # https://www.unidata.ucar.edu/software/udunits/udunits-current/doc/ ...
    #  # ... udunits/udunits2.html#Installation ).
    #  run: |
    #    wget - ftp://ftp.unidata.ucar.edu/pub/udunits/udunits-2.2.26.tar.gz
    #    tar xvzf udunits-2.2.26.tar.gz
    #    cd udunits-2.2.26
    #    make distclean  # possibly not needed, may be fresh GH workspace?
    #    ./configure --disable-shared
    #    make
    #    make check  # verify if worked, debug step but comment out
    #    make install

    # Install cf-python Python-based dependencies pre-testing
    # We do so with conda which was setup in a previous step.
    - name: Install Python-based dependencies
      run: |
        conda install -c ncas -c conda-forge cf-python cf-plot udunits2=2.2.20
        conda install -c conda-forge mpich esmpy

    # Provide another notification message
    - name: Notify about starting testing
      run: echo Now starting to run the cf-python test suite...

    # Finally run the test suite!
    - name: Run test suite
      run: |
        cd cf/test
        python run_tests.py

    # End with a message indicating the suite has completed its run
    - name: Notify about a completed run
      run: |
        echo The cf-python test-suite has completed and you may now
        echo inspect the results.
