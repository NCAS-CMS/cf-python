# A GitHub Action to run the cf-python test suite after events on master.
name: Run test suite

# Triggers the workflow on push or PR events for the master branch (only)
on:
  # For now, at least, do not enable on push to save on limited usage resource
  #push:
  #  branches:
  #    - master
  pull_request:
    # 'reopened' enables manual retrigger via close & re-open. Disable for all
    # edits to manage limited resource (PRs often change before merge-ready).
    types: [opened, reopened, ready_for_review]
    branches:
      - master

# Note a workflow can have 1+ jobs that can run sequentially or in parallel.
jobs:
  # TODO: setup parallel runs (-job-2 etc.) of sub-tests for speed-up
  test-suite-job-0:

    # Set-up the build matrix. We run on different distros and Python versions.
    strategy:
      matrix:
        # Skip older ubuntu-16.04 & macos-10.15 to save usage resource
        os: [ubuntu-latest, macos-latest]
        python-version: [3.7, 3.8, 3.9]

    # Run on new and old(er) versions of the distros we support (Linux, Mac OS)
    runs-on: ${{ matrix.os }}

    # The sequence of tasks that will be executed as part of this job:
    steps:

    - name: Checkout cf-python
      uses: actions/checkout@v2
      with:
        path: main

    # Provide a notification message
    - name: Notify about setup
      run: echo Now setting up the environment for the cf-python test suite...

    - name: Checkout the current cfdm master to use as the dependency
      uses: actions/checkout@v2
      with:
        repository: NCAS-CMS/cfdm
        path: cfdm

    # Prepare to run the test-suite on different versions of Python 3:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    # Setup conda, which is the simplest way to access all dependencies,
    # especially as some are C-based so otherwise difficult to setup.
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        miniconda-version: 'latest'
        activate-environment: cf-latest
        python-version: ${{ matrix.python-version }}
        channels: ncas, conda-forge

    # Ensure shell is configured with conda activated:
    - name: Check conda config
      shell: bash -l {0}
      run: |
        conda info
        conda list
        conda config --show-sources
        conda config --show

    # Install cf-python dependencies, excluding cfdm, pre-testing
    # We do so with conda which was setup in a previous step.
    - name: Install dependencies
      shell: bash -l {0}
      run: |
        conda install -c ncas -c conda-forge udunits2=2.2.25
        conda install -c conda-forge mpich esmpy
        conda install scipy matplotlib
        pip install pycodestyle

    # Install cfdm from master branch, then the cf-python development version
    # We do so with conda which was setup in a previous step.
    - name: Install development cfdm and cf-python
      shell: bash -l {0}
      run: |
        cd ${{ github.workspace }}/cfdm
        pip install -e .
        cd ${{ github.workspace }}/main
        pip install -e .

    # Make UMRead library
    - name: Make UMRead
      shell: bash -l {0}
      run: |
        cd ${{ github.workspace }}/main/cf/umread_lib/c-lib
        make

    # Install the coverage library
    # We do so with conda which was setup in a previous step.
    - name: Install coverage
      shell: bash -l {0}
      run: |
        conda install coverage

    # Provide another notification message
    - name: Notify about starting testing
      run: echo Setup complete. Now starting to run the cf-python test suite...

    # Create a file needed for testing. A separate step is required for this
    # so the file can be registered and recognised first. Locally, the file
    # is created and used on-the-fly by the 'run_tests_and_coverage' script.
    - name: Create test_file.nc
      shell: bash -l {0}
      run: |
        cd ${{ github.workspace }}/main/cf/test
        python create_test_files.py
        ls -la

    # Finally run the test suite and generate a coverage report!
    - name: Run test suite and generate a coverage report
      shell: bash -l {0}
      run: |
        cd ${{ github.workspace }}/main/cf/test
        ./run_tests_and_coverage --nohtml

    # For one job only, generate a coverage report:
    - name: Upload coverage report to Codecov
      # Get coverage from only one job (choose with Ubuntu Python 3.7 as
      # representative). Note that we could use a separate workflow
      # to setup Codecov reports, but given the amount of steps required to
      # install including dependencies via conda, that a separate workflow
      # would have to run anyway, it is simplest to add it in this flow.
      # Also, it means code coverage is only generated if the test suite is
      # passing at least for that job, avoiding useless coverage reports.
      uses: codecov/codecov-action@v1.0.13
      if: |
        matrix.os == 'ubuntu-latest' && matrix.python-version == 3.7
      with:
        file: |
          ${{ github.workspace }}/main/cf/test/cf_coverage_reports/coverage.xml
        fail_ci_if_error: true
        flags: unittests
        name: codecov-umbrella

    # End with a message indicating the suite has completed its run
    - name: Notify about a completed run
      run: |
        echo The cf-python test suite has completed and you may now
        echo inspect the results.
