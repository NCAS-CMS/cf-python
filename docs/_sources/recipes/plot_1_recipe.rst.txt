
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "recipes/plot_1_recipe.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_recipes_plot_1_recipe.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_recipes_plot_1_recipe.py:


Calculating global mean temperature timeseries
====================

In this recipe we will calculate and plot monthly and annual global mean temperature timeseries.

.. GENERATED FROM PYTHON SOURCE LINES 9-10

1. Import cf-python and cf-plot:

.. GENERATED FROM PYTHON SOURCE LINES 10-14

.. code-block:: python


    import cfplot as cfp
    import cf








.. GENERATED FROM PYTHON SOURCE LINES 15-16

2. Read the field constructs:

.. GENERATED FROM PYTHON SOURCE LINES 16-20

.. code-block:: python


    f = cf.read("~/recipes/cru_ts4.06.1901.2021.tmp.dat.nc")
    print(f)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [<CF Field: ncvar%stn(long_name=time(1452), long_name=latitude(360), long_name=longitude(720))>,
     <CF Field: long_name=near-surface temperature(long_name=time(1452), long_name=latitude(360), long_name=longitude(720)) degrees Celsius>]




.. GENERATED FROM PYTHON SOURCE LINES 21-22

3. Select near surface temperature by index and look at its contents:

.. GENERATED FROM PYTHON SOURCE LINES 22-26

.. code-block:: python


    temp = f[1]
    print(temp)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Field: long_name=near-surface temperature (ncvar%tmp)
    -----------------------------------------------------
    Data            : long_name=near-surface temperature(long_name=time(1452), long_name=latitude(360), long_name=longitude(720)) degrees Celsius
    Dimension coords: long_name=time(1452) = [1901-01-16 00:00:00, ..., 2021-12-16 00:00:00] gregorian
                    : long_name=latitude(360) = [-89.75, ..., 89.75] degrees_north
                    : long_name=longitude(720) = [-179.75, ..., 179.75] degrees_east




.. GENERATED FROM PYTHON SOURCE LINES 27-28

4. Select latitude and longitude dimensions by identities, with two different techniques:

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: python


    lon = temp.coordinate("long_name=longitude")
    lat = temp.coordinate("Y")








.. GENERATED FROM PYTHON SOURCE LINES 33-34

5. Print the desciption of near surface temperature using the dump method to show properties of all constructs:

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: python


    temp.dump()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    -----------------------------------------------------
    Field: long_name=near-surface temperature (ncvar%tmp)
    -----------------------------------------------------
    Conventions = 'CF-1.4'
    _FillValue = 9.96921e+36
    comment = 'Access to these data is available to any registered CEDA user.'
    contact = 'support@ceda.ac.uk'
    correlation_decay_distance = 1200.0
    history = 'Fri 29 Apr 14:35:01 BST 2022 : User f098 : Program makegridsauto.for
               called by update.for'
    institution = 'Data held at British Atmospheric Data Centre, RAL, UK.'
    long_name = 'near-surface temperature'
    missing_value = 9.96921e+36
    references = 'Information on the data is available at
                  http://badc.nerc.ac.uk/data/cru/'
    source = 'Run ID = 2204291347. Data generated from:tmp.2204291209.dtb'
    title = 'CRU TS4.06 Mean Temperature'
    units = 'degrees Celsius'

    Data(long_name=time(1452), long_name=latitude(360), long_name=longitude(720)) = [[[--, ..., --]]] degrees Celsius

    Domain Axis: long_name=latitude(360)
    Domain Axis: long_name=longitude(720)
    Domain Axis: long_name=time(1452)

    Dimension coordinate: long_name=time
        calendar = 'gregorian'
        long_name = 'time'
        units = 'days since 1900-1-1'
        Data(long_name=time(1452)) = [1901-01-16 00:00:00, ..., 2021-12-16 00:00:00] gregorian

    Dimension coordinate: long_name=latitude
        long_name = 'latitude'
        units = 'degrees_north'
        Data(long_name=latitude(360)) = [-89.75, ..., 89.75] degrees_north

    Dimension coordinate: long_name=longitude
        long_name = 'longitude'
        units = 'degrees_east'
        Data(long_name=longitude(720)) = [-179.75, ..., 179.75] degrees_east





.. GENERATED FROM PYTHON SOURCE LINES 38-39

6. Latitude and longitude dimension coordinate cell bounds are absent, which are created and set:

.. GENERATED FROM PYTHON SOURCE LINES 39-44

.. code-block:: python


    a = lat.create_bounds()
    lat.set_bounds(a)
    lat.dump()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Dimension coordinate: long_name=latitude
        long_name = 'latitude'
        units = 'degrees_north'
        Data(360) = [-89.75, ..., 89.75] degrees_north
        Bounds:units = 'degrees_north'
        Bounds:Data(360, 2) = [[-90.0, ..., 90.0]] degrees_north




.. GENERATED FROM PYTHON SOURCE LINES 45-50

.. code-block:: python


    b = lon.create_bounds()
    lon.set_bounds(b)
    lon.dump()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Dimension coordinate: long_name=longitude
        long_name = 'longitude'
        units = 'degrees_east'
        Data(720) = [-179.75, ..., 179.75] degrees_east
        Bounds:units = 'degrees_east'
        Bounds:Data(720, 2) = [[-180.0, ..., 180.0]] degrees_east




.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: python


    print(b.array)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[-180.  -179.5]
     [-179.5 -179. ]
     [-179.  -178.5]
     ...
     [ 178.5  179. ]
     [ 179.   179.5]
     [ 179.5  180. ]]




.. GENERATED FROM PYTHON SOURCE LINES 55-56

7. Time dimension coordinate cell bounds are similarly created and set for cell sizes of one calendar month:

.. GENERATED FROM PYTHON SOURCE LINES 56-62

.. code-block:: python


    time = temp.coordinate("long_name=time")
    c = time.create_bounds(cellsize=cf.M())
    time.set_bounds(c)
    time.dump()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Dimension coordinate: long_name=time
        calendar = 'gregorian'
        long_name = 'time'
        units = 'days since 1900-1-1'
        Data(1452) = [1901-01-16 00:00:00, ..., 2021-12-16 00:00:00] gregorian
        Bounds:calendar = 'gregorian'
        Bounds:units = 'days since 1900-1-1'
        Bounds:Data(1452, 2) = [[1901-01-01 00:00:00, ..., 2022-01-01 00:00:00]] gregorian




.. GENERATED FROM PYTHON SOURCE LINES 63-64

8. Calculate and plot the area weighted mean surface temperature for each time:

.. GENERATED FROM PYTHON SOURCE LINES 64-68

.. code-block:: python


    global_avg = temp.collapse("area: mean", weights=True)
    cfp.lineplot(global_avg, color="red", title="Global mean surface temperature")




.. image-sg:: /recipes/images/sphx_glr_plot_1_recipe_001.png
   :alt: Global mean surface temperature
   :srcset: /recipes/images/sphx_glr_plot_1_recipe_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-70

9. Calculate and plot the annual global mean surface temperature:

.. GENERATED FROM PYTHON SOURCE LINES 70-77

.. code-block:: python


    annual_global_avg = global_avg.collapse("T: mean", group=cf.Y())
    cfp.lineplot(
        annual_global_avg,
        color="red",
        title="Annual global mean surface temperature",
    )



.. image-sg:: /recipes/images/sphx_glr_plot_1_recipe_002.png
   :alt: Annual global mean surface temperature
   :srcset: /recipes/images/sphx_glr_plot_1_recipe_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  41.194 seconds)


.. _sphx_glr_download_recipes_plot_1_recipe.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_1_recipe.py <plot_1_recipe.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_1_recipe.ipynb <plot_1_recipe.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
