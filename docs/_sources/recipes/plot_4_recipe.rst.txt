
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "recipes/plot_4_recipe.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_recipes_plot_4_recipe.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_recipes_plot_4_recipe.py:


Comparing two datasets with different resolutions using regridding
==================================================================

In this recipe, we will regrid two different datasets with different resolutions. An example use case could be one where the observational dataset with a higher resolution needs to be regridded to that of the model dataset so that they can be compared with each other.

.. GENERATED FROM PYTHON SOURCE LINES 9-10

1. Import cf-python:

.. GENERATED FROM PYTHON SOURCE LINES 10-13

.. code-block:: python


    import cf








.. GENERATED FROM PYTHON SOURCE LINES 14-15

2. Read the field constructs:

.. GENERATED FROM PYTHON SOURCE LINES 15-19

.. code-block:: python


    obs = cf.read("~/recipes/cru_ts4.06.1901.2021.tmp.dat.nc", chunks=None)
    print(obs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [<CF Field: ncvar%stn(long_name=time(1452), long_name=latitude(360), long_name=longitude(720))>,
     <CF Field: long_name=near-surface temperature(long_name=time(1452), long_name=latitude(360), long_name=longitude(720)) degrees Celsius>]




.. GENERATED FROM PYTHON SOURCE LINES 20-26

.. code-block:: python


    model = cf.read(
        "~/recipes/tas_Amon_HadGEM3-GC3-1_hist-1p0_r3i1p1f2_gn_185001-201412.nc"
    )
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [<CF Field: air_temperature(time(1980), latitude(144), longitude(192)) K>]




.. GENERATED FROM PYTHON SOURCE LINES 27-28

3. Select observation and model temperature fields by identity and index respectively, and look at their contents:

.. GENERATED FROM PYTHON SOURCE LINES 28-32

.. code-block:: python


    obs_temp = obs.select_field("long_name=near-surface temperature")
    print(obs_temp)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Field: long_name=near-surface temperature (ncvar%tmp)
    -----------------------------------------------------
    Data            : long_name=near-surface temperature(long_name=time(1452), long_name=latitude(360), long_name=longitude(720)) degrees Celsius
    Dimension coords: long_name=time(1452) = [1901-01-16 00:00:00, ..., 2021-12-16 00:00:00] gregorian
                    : long_name=latitude(360) = [-89.75, ..., 89.75] degrees_north
                    : long_name=longitude(720) = [-179.75, ..., 179.75] degrees_east




.. GENERATED FROM PYTHON SOURCE LINES 33-37

.. code-block:: python


    model_temp = model[0]
    print(model_temp)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Field: air_temperature (ncvar%tas)
    ----------------------------------
    Data            : air_temperature(time(1980), latitude(144), longitude(192)) K
    Cell methods    : time(1980): mean (interval: 1 hour)
    Dimension coords: time(1980) = [1850-01-16 00:00:00, ..., 2014-12-16 00:00:00] 360_day
                    : latitude(144) = [-89.375, ..., 89.375] degrees_north
                    : longitude(192) = [0.9375, ..., 359.0625] degrees_east
                    : height(1) = [1.5] m
    Coord references: grid_mapping_name:latitude_longitude




.. GENERATED FROM PYTHON SOURCE LINES 38-39

4. Regrid observational data to that of the model data and create a new low resolution observational data using bilinear interpolation:

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: python

    obs_temp_regrid = obs_temp.regrids(model_temp, method="linear")
    print(obs_temp_regrid)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Field: long_name=near-surface temperature (ncvar%tmp)
    -----------------------------------------------------
    Data            : long_name=near-surface temperature(long_name=time(1452), latitude(144), longitude(192)) degrees Celsius
    Dimension coords: long_name=time(1452) = [1901-01-16 00:00:00, ..., 2021-12-16 00:00:00] gregorian
                    : latitude(144) = [-89.375, ..., 89.375] degrees_north
                    : longitude(192) = [0.9375, ..., 359.0625] degrees_east
    Coord references: grid_mapping_name:latitude_longitude





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.502 seconds)


.. _sphx_glr_download_recipes_plot_4_recipe.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_4_recipe.py <plot_4_recipe.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_4_recipe.ipynb <plot_4_recipe.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
